// الكلمة let تمكنك من تعريف متغيرات مقيّدة في الـ block (الدالة - الحلقة) الذي عُرّفت به (يحذها المُفسّر بعد الخروج من البلوك أي إنك إن عرفت a داخل دالة اسمها add لن يتعرف المفسّر على a خارج هذه الدالّة

//     الكلمة var تعرّف المتغيرات globally أي أنّ المتغيّر يعمل على كامل الكود و في أي block

// const  يجعل قيمة المتغير غير قابل للتعديل


// var
// تستعمل هذه الكلمة لإنشاء متغيرات داخل الكائن العلوي window وهذه المتغيرات إما أن تكون عامة global يمكن الوصول إليها في جميع أنحاء التطبيق أو قد تكون في نطاق محدد وهو نطاق دالة معينة (function-scoped) بحيث لا يمكن الوصول إليها خارج هذه الدالة (private variables). هذه الكلمة المفتاحية موجودة منذ الإصدارات الأولى لجافاسكريبت ولكن الوقت جاء لإضافة بدائل عنها تكون أكثر مرونة وأمانا حتى تساير هذه اللغة الإيقاع السريع الذي يتقدم به مجال برمجيات الويب والجافاسكريبت بصفة عامة. ولهذا ظهر let في الإصدار الأخير من الجافاسكريبت.

// function varTest() {
//   var x = 1;
//   if (true) {
//     var x = 2; // نفس المتغير
//     console.log(x); // 2
//   }
//   console.log(x); // 2
// }
// let
// بعكس var فإن let تمكننا من إنشاء متغيرات تابعة لنطاقات أضيق قد تكون دوال أو فقط تعابير شرطية أو حلقات متكررة وغيرها ولهذا تسمى هذه المتغيرات بالإنجليزية block-scoped أي أنك لا تستطيع الوصول إليها خارج ال block الذي صُرِّح بها فيه.

// function letTest() {
//   let x = 1;
//   if (true) {
//     let x = 2; // متغير آخر
//     console.log(x); // 2
//   }
//   console.log(x); // 1
// }
// وعندما تحاول استعمال متغير قبل التصريح به فإنك ستحصل على خطأ جميل :) في برمجيتك من نوع ReferenceError على عكس ما اعتدنا علينا مع الكلمة المفتاحية var حيث كانت تعطى لكل متغير قيمة افتراضية وهي undefined حتى قبل إنشاء هذا المتغير.

